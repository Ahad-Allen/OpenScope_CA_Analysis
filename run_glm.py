"""
run_glm.py

This script runs and analyses GLMs predicting ROI activity based on stimulus
and behavioural information for data generated by the AIBS experiments for the 
Credit Assignment Project

Authors: Colleen Gillon

Date: September, 2019

Note: this code uses python 3.7.

"""

import os
import copy
import argparse

from analysis import glm
from util import gen_util
from sess_util import sess_gen_util, sess_ntuple_util, sess_str_util, \
                      sess_plot_util
from plot_fcts import plot_from_dicts_tool as plot_dicts



"""
GLM is run by session? for all mice? Gabfr would have to be different for each 
Predict average ROI activity across all ROIs for a segment (0.4 s)
Weight surprise? Hoooowwwww....



GLM for fMRI!
Eventually set sessions to do 1, 2, 3... (continuous)
Identify ROI sensiivities through F-stat? and false discovery correction for 
multiple comparisons

Change regression criterion: Baysian information criterion or 
                             log-likelihood of the data

"""


#############################################
def reformat_args(args):
    """
    reformat_args(args)

    Returns reformatted args for analyses, specifically 
        - Sets stimulus parameters to 'none' if they are irrelevant to the 
          stimtype
        - Changes stimulus parameters from 'both' to actual values

    Adds the following args:
        - dend (str)     : type of dendrites to use ('aibs', 'extr')
        - omit_sess (str): sess to omit
        - omit_mice (str): mice to omit

    Required args:
        - args (Argument parser): parser with the following attributes: 
            runtype (str)        : runtype ('pilot' or 'prod')
            stimtype (str)       : stimulus to analyse (bricks or gabors)
    
    Returns:
        - args (Argument parser): input parser, with the following attributes 
                                  added:
                                      bri_dir, bri_size, gabfr, gabk, gab_ori
                                      omit_sess, omit_mice, dend
    """
    args = copy.deepcopy(args)


    parser.add_argument('--bri_dir', default='both', 
                        help='brick dir (right, left, or both)') 
    parser.add_argument('--bri_size', default=128, 
                        help='brick size (128, 256, or both)')
    parser.add_argument('--gabfr', default='any', 
                        help='gabor frames to include')
    parser.add_argument('--gabk', default=16,
                        help='kappa value (4, 16, or both)')    
    parser.add_argument('--gab_ori', default='all',
                        help='gabor orientation values (0, 45, 90, 135, all)')    


    [args.bri_dir, args.bri_size, args.gabfr, 
     args.gabk, args.gab_ori] = sess_gen_util.get_params(args.stimtype, 
                                              'both', 128, 'any', 16, 'any')

    if args.plane == 'soma':
        args.dend = 'aibs'

    args.omit_sess, args.omit_mice = sess_gen_util.all_omit(args.stimtype, 
                                                    args.runtype, args.bri_dir, 
                                                    args.bri_size, args.gabk)
    
    return args


#############################################
def init_param_cont(args):
    """
    init_param_cont(args)

    Returns args:
        - in the following nametuples: analyspar, sesspar, stimpar, autocorr, 
                                       permpar, quintpar
        - in the following dictionary: figpar 

    Required args:
        - args (Argument parser): parser with the following attributes:

            bri_dir (str or list)  : brick direction values to include
                                     ('right', 'left', ['right', 'left'])
            bri_size (int or list) : brick size values to include
                                     (128, 256 or [128, 256])
            closest (bool)         : if False, only exact session number is 
                                     retained, otherwise the closest.
            dend (str)             : type of dendrites to use ('aibs' or 'dend')
            error (str)            : error statistic parameter ('std' or 'sem')
            fontdir (str)          : path to directory containing additional 
                                     fonts
            fluor (str)            : if 'raw', raw ROI traces are used. If 
                                     'dff', dF/F ROI traces are used.
            gabfr (int)            : gabor frame at which sequences start 
                                     (0, 1, 2, 3)
            gabk (int or list)     : gabor kappa values to include 
                                     (4, 16 or [4, 16])
            gab_ori (int or list)  : gabor orientation values to include
                                     ([0, 45, 90, 135])
            incl (str)             : 
            lag_s (num)            : lag for autocorrelation (in sec)
            line (str)             : line ('L23', 'L5', 'any')
            min_rois (int)         : min number of ROIs
            ncols (int)            : number of columns
            no_datetime (bool)     : if True, figures are not saved in a 
                                     subfolder named based on the date and time.
            output (str)           : general directory in which to save output
            overwrite (bool)       : if False, overwriting existing figures 
                                     is prevented by adding suffix numbers.
            pass_fail (str or list): pass/fail values of interest ('P', 'F')
            plane (str)            : plane ('soma', 'dend', 'any')
            plt_bkend (str)        : mpl backend to use
            post (num)             : range of frames to include after each 
                                     reference frame (in s)
            pre (num)              : range of frames to include before each 
                                     reference frame (in s)
            runtype (str or list)  : runtype ('pilot' or 'prod')
            sess_n (int)           : session number
            stats (str)            : statistic parameter ('mean' or 'median')

    Returns:
        - analyspar (AnalysPar): named tuple of analysis parameters
        - sesspar (SessPar)    : named tuple of session parameters
        - stimpar (StimPar)    : named tuple of stimulus parameters
        - glmpar (GLMPar)      : named tuple of GLM parameters
        - figpar (dict)        : dictionary containing following 
                                        subdictionaries:
            ['init']: dict with following inputs as attributes:
                                'ncols', 'sharey', as well as
                ['ncols'] (int)      : number of columns in the figures
                ['sharex'] (bool)    : if True, x axis lims are shared across
                                       subplots
                ['sharey'] (bool)    : if True, y axis lims are shared across
                                       subplots
                ['subplot_hei'] (num): height of each subplot (inches)
                ['subplot_wid'] (num): width of each subplot (inches)

            ['save']: dict with the following inputs as attributes:
                                'overwrite', as well as
                ['datetime'] (bool): if True, figures are saved in a subfolder 
                                     named based on the date and time.
                ['use_dt'] (str)   : datetime folder to use
                ['fig_ext'] (str)  : figure extension

            ['dirs']: dict with the following attributes:
                ['figdir'] (str)   : main folder in which to save figures
                ['roi'] (str)      : subdirectory name for ROI analyses
                ['run'] (str)      : subdirectory name for running analyses
                ['autocorr'] (str) : subdirectory name for autocorrelation 
                                     analyses
                ['glm'] (str)      : subdirectory name for glm analyses
                ['locori'] (str)   : subdirectory name for location and 
                                     orientation responses
                ['oridir'] (str)   : subdirectory name for 
                                     orientation/direction analyses
                ['surp_qu'] (str)  : subdirectory name for surprise, quintile 
                                     analyses
                ['tune_curv'] (str): subdirectory name for tuning curves
                ['grped'] (str)    : subdirectory name for ROI grps data
                ['mags'] (str)     : subdirectory name for magnitude analyses
            
            ['mng']: dict with the following attributes:
                ['plt_bkend'] (str): mpl backend to use
                ['linclab'] (bool) : if True, Linclab mpl defaults are used
                ['fontdir'] (str)  : path to directory containing additional 
                                     fonts
    """
    args = copy.deepcopy(args)

    # analysis parameters
    analyspar = sess_ntuple_util.init_analyspar(args.fluor, True, 
                                 args.stats, args.error, dend=args.dend)

    # session parameters
    sesspar = sess_ntuple_util.init_sesspar(args.sess_n, args.closest, 
                               args.plane, args.line, args.min_rois, 
                               args.pass_fail, args.incl, args.runtype)

    # stimulus parameters
    stimpar = sess_ntuple_util.init_stimpar(args.stimtype, args.bri_dir, 
                               args.bri_size, args.gabfr, args.gabk, 
                               args.gab_ori, args.pre, args.post)

    # SPECIFIC ANALYSES    
    # autocorrelation parameters
    glmpar = sess_ntuple_util.init_glmpar(args.each_roi, args.k, args.test)
    
    # figure parameters
    figpar = sess_plot_util.init_figpar(ncols=int(args.ncols),
                            datetime=not(args.no_datetime), 
                            overwrite=args.overwrite, runtype=args.runtype, 
                            output=args.output, plt_bkend=args.plt_bkend, 
                            fontdir=args.fontdir)

    return [analyspar, sesspar, stimpar, glmpar, figpar]


#############################################
def prep_analyses(sess_n, args, mouse_df):
    """
    prep_analyses(sess_n, args, mouse_df)

    Prepares named tuples and sessions for which to run analyses, based on the 
    arguments passed.

    Required args:
        - sess_n (int)          : session number to run analyses on, or 
                                  combination of session numbers to compare, 
                                  e.g. '1v2'
        - args (Argument parser): parser containing all parameters
        - mouse_df (pandas df)  : path name of dataframe containing information 
                                  on each session

    Returns:
        - sessions (list)          : list of sessions, or nested list per mouse 
                                     if sess_n is a combination
        - analyspar (AnalysPar)    : named tuple containing analysis parameters
        - sesspar (SessPar)        : named tuple containing session parameters
        - stimpar (StimPar)        : named tuple containing stimulus parameters
        - autocorrpar (AutocorrPar): named tuple containing autocorrelation 
                                     parameters
        - permpar (PermPar)        : named tuple containing permutation 
                                     parameters
        - quintpar (QuintPar)      : named tuple containing quintile 
                                     parameters
        - figpar (dict)            : dictionary containing following 
                                     subdictionaries:
            ['init']: dict with following inputs as attributes:
                                'ncols', 'sharey', as well as
                ['ncols'] (int)      : number of columns in the figures
                ['sharex'] (bool)    : if True, x axis lims are shared across
                                       subplots
                ['sharey'] (bool)    : if True, y axis lims are shared across
                                       subplots
                ['subplot_hei'] (num): height of each subplot (inches)
                ['subplot_wid'] (num): width of each subplot (inches)

            ['save']: dict with the following inputs as attributes:
                                'overwrite', as well as
                ['datetime'] (bool): if True, figures are saved in a subfolder 
                                     named based on the date and time.
                ['use_dt'] (str)   : datetime folder to use
                ['fig_ext'] (str)  : figure extension

            ['dirs']: dict with the following attributes:
                ['figdir'] (str)   : main folder in which to save figures
                ['roi'] (str)      : subdirectory name for ROI analyses
                ['run'] (str)      : subdirectory name for running analyses
                ['autocorr'] (str) : subdirectory name for autocorrelation 
                                     analyses
                ['glm'] (str)      : subdirectory name for glm analyses
                ['locori'] (str)   : subdirectory name for location and 
                                     orientation responses
                ['oridir'] (str)   : subdirectory name for 
                                     orientation/direction analyses
                ['surp_qu'] (str)  : subdirectory name for surprise, quintile 
                                     analyses
                ['tune_curv'] (str): subdirectory name for tuning curves
                ['grped'] (str)    : subdirectory name for ROI grps data
                ['mags'] (str)     : subdirectory name for magnitude analyses
            
            ['mng']: dict with the following attributes:
                ['plt_bkend'] (str): mpl backend to use
                ['linclab'] (bool) : if True, Linclab mpl defaults are used
                ['fontdir'] (str)  : path to directory containing additional 
                                     fonts
        - seed (int)               : seed to use
    """

    args = copy.deepcopy(args)

    # chose a seed if none is provided (i.e., args.seed=-1), but seed later
    seed = gen_util.seed_all(args.seed, 'cpu', print_seed=False, 
                             seed_now=False)

    args.sess_n = sess_n

    [analyspar, sesspar, stimpar, glmpar, figpar] = init_param_cont(args)
    
    # get session IDs and create Sessions
    sessids = sess_gen_util.get_sess_vals(mouse_df, 'sessid', sesspar.mouse_n, 
                            sesspar.sess_n, sesspar.runtype, incl=args.incl, 
                            omit_sess=args.omit_sess, omit_mice=args.omit_mice)

    sessions = sess_gen_util.init_sessions(sessids, args.datadir, mouse_df, 
                           sesspar.runtype, fulldict=False, dend=analyspar.dend, 
                           pupil=True)

    print(f'\nAnalysis of {sesspar.plane} responses to {stimpar.stimtype[:-1]} '
          f'stimuli ({sesspar.runtype} data)\nSessions: {args.sess_n}')

    return [sessions, analyspar, sesspar, stimpar, glmpar, figpar, seed]



#############################################
def run_analyses(sessions, analyspar, sesspar, stimpar, glmpar, figpar, 
                 seed=None, analyses='all', parallel=False):
    """
    run_analyses(sessions, analyspar, sesspar, stimpar, glmpar, figpar)

    Run requested analyses on sessions using the named tuples passed.

    Required args:
        - sessions (list)      : list of sessions
        - analyspar (AnalysPar): named tuple containing analysis parameters
        - sesspar (SessPar)    : named tuple containing session parameters
        - stimpar (StimPar)    : named tuple containing stimulus parameters
        - glmpar (GLMPar)      : named tuple containing autocorrelation 
                                     parameters
        - figpar (dict)        : dictionary containing figure parameters
    
    Optional args:
        - seed (int)     : seed to use
                           default: None
        - analyses (str) : analyses to run
                           default: 'all'
        - parallel (bool): if True, some analyses are parallelized 
                           across CPU cores 
                           default: False
    """    

    if len(sessions) == 0:
        print('No sessions fit these criteria.')
        return

    all_analyses = 'v'
    all_check = ''


    if 'all' in analyses:
        if '_' in analyses:
            excl = analyses.split('_')[1]
            analyses, _ = gen_util.remove_lett(all_analyses, excl)
        else:
            analyses = all_analyses

    if 'v' in analyses:
        glm.run_glms(sessions, 'v', seed, analyspar, sesspar, stimpar, glmpar, 
                    figpar, parallel=args.parallel)
        all_check += 'v'

    if set(all_analyses) != set(all_check):
        raise ValueError('all_analyses variable is missing some analysis '
                         'letters!')

    return


if __name__ == "__main__":

    parser = argparse.ArgumentParser()


        # general parameters
    parser.add_argument('--datadir', default=None, 
                        help=('data directory (if None, uses a directory '
                              'defined below'))
    parser.add_argument('--output', default='', help='where to store output')
    parser.add_argument('--analyses', default='all', 
                        help=('analyses to run: explained variance (v)'))
    parser.add_argument('--sess_n', default=1,
                        help='session to aim for, e.g. 1, 2, last, all')
    parser.add_argument('--dict_path', default='', 
                        help=('path to info dictionary from which to plot '
                              'data.'))

        # technical parameters
    parser.add_argument('--plt_bkend', default=None, 
                        help='switch mpl backend when running on server')
    parser.add_argument('--parallel', action='store_true', 
                        help='do runs in parallel.')
    parser.add_argument('--seed', default=-1, type=int, 
                        help='random seed (-1 for None)')

        # session parameters
    parser.add_argument('--runtype', default='prod', help='prod or pilot')
    parser.add_argument('--min_rois', default=5, type=int, 
                        help='min rois criterion')

        # stimulus parameters
    parser.add_argument('--post', default=0.45, type=float, 
                        help='sec after reference frames')
    parser.add_argument('--stimtype', default='gabors', 
                        help='stimulus to analyse') 

        # analysis parameters
    parser.add_argument('--fluor', default='dff', help='raw or dff')

        # GLM parameters
    parser.add_argument('--each_roi', action='store_true', 
                        help='run for each ROI separately')
    parser.add_argument('--k', type=int, default=10, help='number of folds')
    parser.add_argument('--test', action='store_true', 
                        help='runs on only a few ROIS')

    # generally fixed 
        # analysis parameters
    parser.add_argument('--stats', default='mean', help='plot mean or median')
    parser.add_argument('--error', default='sem', 
                        help='sem for SEM/MAD, std for std/qu') 
    parser.add_argument('--dend', default='extr', help='aibs, extr')   
        # session parameters
    parser.add_argument('--plane', default='any', help='soma, dend')
    parser.add_argument('--line', default='any', help='L23, L5')
    parser.add_argument('--closest', action='store_true', 
                        help=('if True, the closest session number is used. '
                              'Otherwise, only exact.'))
    parser.add_argument('--pass_fail', default='P', 
                        help='P to take only passed sessions')
    parser.add_argument('--incl', default='any',
                        help='include only `yes`, `no` or `any`')
        # stimulus parameters
    parser.add_argument('--pre', default=0, type=float, help='sec before frame')
        # figure parameters
    parser.add_argument('--ncols', default=4, help='number of columns')
    parser.add_argument('--no_datetime', action='store_true',
                        help='create a datetime folder')
    parser.add_argument('--overwrite', action='store_true', 
                        help='allow overwriting')
        # plot using modif_analys_plots (if plotting from dictionary)
    parser.add_argument('--modif', action='store_true', 
                        help=('plot from dictionary using modified plot '
                              'functions'))

    args = parser.parse_args()

    # args.device = gen_util.get_device(args.cuda)
    args.fontdir = os.path.join('..', 'tools', 'fonts')

    if args.dict_path != '':
        plot_dicts.plot_from_dicts(args.dict_path, source='glm', 
                   plt_bkend=args.plt_bkend, fontdir=args.fontdir, 
                   parallel=args.parallel)
    else:
        if args.datadir is None:
            args.datadir = os.path.join('..', 'data', 'AIBS') 

        mouse_df = 'mouse_df.csv'

        args = reformat_args(args)

        # get numbers of sessions to analyse
        if args.sess_n == 'all':
            all_sess_ns = sess_gen_util.get_sess_vals(mouse_df, 'sess_n', 
                              mouse_n=args.mouse_n, runtype=args.runtype, 
                              plane=args.plane, line=args.line, 
                              min_rois=args.min_rois, pass_fail=args.pass_fail, 
                              incl=args.incl, omit_sess=args.omit_sess, 
                              omit_mice=args.omit_mice)
        else:
            all_sess_ns = gen_util.list_if_not(args.sess_n)

        for sess_n in all_sess_ns:
            analys_pars = prep_analyses(sess_n, args, mouse_df)
            run_analyses(*analys_pars, analyses=args.analyses, 
                         parallel=args.parallel)

