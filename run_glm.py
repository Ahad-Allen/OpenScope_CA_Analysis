"""
run_logreg.py

This script runs and analyses GLMs predicting ROI activity based on stimulus
and behavioural information for data generated by the AIBS experiments for the 
Credit Assignment Project

Authors: Colleen Gillon

Date: September, 2019

Note: this code uses python 3.7.

"""

import os
import copy
import argparse

from analysis import glm
from util import gen_util
from sess_util import sess_gen_util, sess_ntuple_util, sess_str_util
from plot_fcts import logreg_plots


"""
GLM is run by session? for all mice? Gabfr would have to be different for each 
Predict average ROI activity across all ROIs for a segment (0.4 s)
Weight surprise? Hoooowwwww....



GLM for fMRI!
Eventually set sessions to do 1, 2, 3... (continuous)
Identify ROI sensiivities through F-stat? and false discovery correction for 
multiple comparisons

Change regression criterion: Baysian information criterion or 
                             log-likelihood of the data

"""


#############################################
def run_glm(args):
    """
    run_glm(args)

    Runs a GLM on the specified stimulus type and range of sessions.
    
    """

    args = copy.deepcopy(args)

    if args.datadir is None:
        args.datadir = os.path.join('..', 'data', 'AIBS') 


    mouse_df = 'mouse_df.csv'

    [bri_dir, bri_size, gabfr, 
                gabk, gab_ori] = sess_gen_util.get_params(args.stimtype, 
                                            args.bri_dir, args.bri_size, 
                                            'any', args.gabk)

    sesspar = sess_ntuple_util.init_sesspar(args.sess_n, incl=args.incl, 
                               runtype=args.runtype, mouse_n=args.mouse_n)
    stimpar = sess_ntuple_util.init_stimpar(args.stimtype, bri_dir, bri_size, 
                                            gabfr, gabk, gab_ori, 0, args.post)
    analyspar = sess_ntuple_util.init_analyspar(args.fluor, True, args.stats, 
                                                args.error, args.scale)

    omit_sess, omit_mice = sess_gen_util.all_omit(stimpar.stimtype, 
                                         sesspar.runtype, stimpar.bri_dir, 
                                         stimpar.bri_size, stimpar.gabk)

    sessids = sess_gen_util.get_sess_vals(mouse_df, 'sessid', sesspar.mouse_n, 
                                          sesspar.sess_n, sesspar.runtype, 
                                          incl='yes', omit_sess=omit_sess, 
                                          omit_mice=omit_mice)

    if len(sessids) == 0:
        print(('No sessions found (mouse: {}, sess: {}, '
               'runtype: {})').format(sesspar.mouse_n, sesspar.sess_n, 
                                      sesspar.runtype))

    sesses = sess_gen_util.init_sessions(sessids, args.datadir, mouse_df, 
                                         sesspar.runtype, fulldict=False, 
                                         dend=analyspar.dend)
    full_df = glm.build_stim_beh_df(sesses, analyspar, sesspar, stimpar)
    regr, all_regr = glm.run_glm(full_df, analyspar, sesspar, stimpar, args.reg)

    return regr, all_regr


if __name__ == "__main__":

    parser = argparse.ArgumentParser()
    parser.add_argument('--output', 
                        default=os.path.join('results', 'logreg_models'),
                        help='where to store output')
    parser.add_argument('--datadir', default=None, 
                        help=('data directory (if None, uses a directory '
                              'defined below'))
    parser.add_argument('--task', default='run_regr', 
                        help='run_regr, analyse or plot')

        # technical parameters
    parser.add_argument('--plt_bkend', default=None, 
                        help='switch mpl backend when running on server')
    parser.add_argument('--parallel', action='store_true', 
                        help='do runs in parallel.')
    parser.add_argument('--cuda', action='store_true', 
                        help='run on cuda.')
    parser.add_argument('--ep_freq', default=50, type=int,  
                        help='epoch frequency at which to print loss')
    parser.add_argument('--n_reg', default=50, type=int, help='n regular runs')
    parser.add_argument('--n_shuff', default=50, type=int, 
                        help='n shuffled runs')

        # glmpar
    parser.add_argument('--reg', default='ridge', 
                        help='regularizer to use (`lasso` or `ridge`)')
    
        # sesspar
    parser.add_argument('--mouse_n', default=1, type=int)
    parser.add_argument('--runtype', default='prod', help='prod or pilot')
    parser.add_argument('--sess_n', default=1)
    parser.add_argument('--incl', default='yes',
                        help='include only `yes`, `no` or `any`')
        # stimpar
    parser.add_argument('--stimtype', default='gabors', help='gabors or bricks')
    parser.add_argument('--gabk', default=16, type=int, 
                        help='gabor kappa parameter')
    parser.add_argument('--bri_dir', default='both', help='brick direction')
    parser.add_argument('--bri_size', default=128, help='brick size')
    parser.add_argument('--post', default=0.45)

        # analyspar
    parser.add_argument('--scale', default='none', 
                        help='scaling data: none, all or roi (by roi)')
    parser.add_argument('--fluor', default='dff', help='raw or dff')
    parser.add_argument('--stats', default='mean', help='mean or median')
    parser.add_argument('--error', default='sem', help='std or sem')

    args = parser.parse_args()

    # args.device = gen_util.get_device(args.cuda)
    # args.fontdir = os.path.join('..', 'tools', 'fonts')

    regr, all_regr = run_glm(args)
